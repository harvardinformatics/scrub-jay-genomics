import yaml
import glob, os, pathlib

#load sample sheet into dictionary where key=sample ID, value=file paths
samsheet="/n/holylfs05/LABS/informatics/Everyone/scrubjay/RAW_DATA/sample_sheet.txt"
samdict = {}
with open(samsheet) as fin:
    for line in fin:
        line = line.rstrip()
        line = line.replace(",", " ")
        data = line.split("\t")
        #samdict[data[0]] = data[1]
        samdict[data[0]] = {'reads' : data[2], 'HiC' : data[3]}

#Change these variables:
input_dir = "/n/holylfs05/LABS/informatics/Everyone/scrubjay/RAW_DATA"
samples = ["MCZ_Orn_366497"]
#samples = list(samdict.keys())
haplotypes=["hap1.p_ctg", "hap2.p_ctg", "p_ctg"]
hifiasm_path = "/n/holylfs05/LABS/informatics/Everyone/scrubjay/hifiasm"
hifi_outdir = "results/hifiasm_output_RAW"
assem_outdir = "results/assemblies"


def get_reads(wildcards):
    return samdict[wildcards.sample]['reads']

def get_hifi_params(wildcards):
    if samdict[wildcards.sample]['HiC'] == "none":
        return "-o " + hifi_outdir + "/" + wildcards.sample
    else:
        #first split samdict[wildcards.sample]['HiC'] on space into a list
        hic_reads = samdict[wildcards.sample]['HiC'].split(" ")
        return "-o " + hifi_outdir + "/" + wildcards.sample + " --h1 " + hic_reads[0] +
            "--h2 " + hic_reads[1]

rule all:
    input:
        expand("results/assembly_qc/{sample}_{haplo}_quast/report.txt", haplo=haplotypes, sample=samples)

rule merge:
    input:
        get_reads
    output:
        temp("{sample}_combined_reads.fastq.gz")
    shell:
        "cat {input} > {output}"

rule adapterfilt:
    input:
        #reads = lambda wildcards: glob('{base}/{sample}/*.fastq.gz'.format(sample=wildcards.sample, base=input_dir))
        #reads = input_dir + "/{sample}/" + "{read}.fastq.gz" #this is incorrect, as reads are in subdirectories of sample directory!
        "{sample}_combined_reads.fastq.gz"
    output:
        temp(hifi_outdir + "/{sample}.filt.fastq.gz")
    conda:
        "envs/adapter.yaml"
    shell:
        "cutadapt --discard-trimmed --rev-comp --overlap=35 -b ATCTCTCTCAACAACAACAACGGAGGAGGAGGAAAAGAGAGAGAT -b ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT -o {output} -i {input}"

rule hifi:
    input:
        hifi_outdir + "/{sample}.filt.fastq.gz"
    output:
        temp(hifi_outdir + "/{sample}.{haplo}.gfa")
    params:
        get_hifi_params
    threads: 16
    shell:
        "{hifiasm_path}/hifiasm -t {threads} -o {params} {input}"

rule gfa_to_fasta:
    input:
        hifi_outdir + "/{sample}.{haplo}.gfa"
    output:
        temp(hifi_outdir + "/{sample}.{haplo}.fa")
    shell:
        "awk '/^S/{print \">\"$2;print $3}' {input} > {output}"

rule rename_contig:
    input:
        hifi_outdir + "/{sample}.{haplo}.fa"
    output:
        assem_outdir + "/{sample}.{haplo}.fa"
    run:
        fasta=open(input)
        newfasta=open(output,'w')
        for line in fasta:
            if line.startswith('>'):
                ID=line.replace(">", "")
                newID= '>' + sample + '#' + haplo + '#' + ID + '\n'
                newfasta.write(newID)
            else:
                newfasta.write(line)
        fasta.close()
        newfasta.close()

rule quast:
    input:
        assem_outdir + "/{sample}.{haplo}.fa"
    params: #trying alternative way that's less hack-y
        prefix="results/assembly_qc/{sample}_{haplo}_quast"
    output:
        #quast_dir = directory("results/assembly_qc/{sample}_quast")
        #quast_done = touch("results/assembly_qc/{sample}_quast/{sample}_QUAST.done")
        "{params.prefix}/report.txt"
    conda:
        "envs/quast.yaml"
    threads: 4
    log:
        "logs/{sample}_{haplo}/quast_log/"
    shell:
        "quast.py -t {threads} --eukaryote -o {params.prefix} {input} &> {log}"
